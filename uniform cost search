import heapq

def uniform_cost_search(graph, start, goal):
    # Priority queue for UCS (min-heap based on path cost)
    priority_queue = []
    heapq.heappush(priority_queue, (0, start))  # (cost, node)
    
    # Dictionary to store visited nodes and their cost
    visited = {}
    
    while priority_queue:
        # Pop the node with the lowest cost
        cost, current = heapq.heappop(priority_queue)
        
        # If the node has been visited with a lower cost, skip it
        if current in visited and visited[current] <= cost:
            continue
        
        # Mark this node as visited
        visited[current] = cost
        
        # If the goal is reached, return the cost
        if current == goal:
            return cost
        
        # Expand the current node's neighbors
        for neighbor, weight in graph[current]:
            total_cost = cost + weight
            heapq.heappush(priority_queue, (total_cost, neighbor))
    
    # If the goal is not reachable
    return float('inf')

# Example usage
if __name__ == "__main__":
    # Define the graph as an adjacency list
    # Each node has a list of tuples (neighbor, weight)
    graph = {
        'A': [('B', 1), ('C', 4)],
        'B': [('A', 1), ('C', 2), ('D', 5)],
        'C': [('A', 4), ('B', 2), ('D', 1)],
        'D': [('B', 5), ('C', 1)]
    }
    
    # Perform UCS
    start_node = 'A'
    goal_node = 'D'
    result = uniform_cost_search(graph, start_node, goal_node)
    
    if result != float('inf'):
        print(f"The cost to reach {goal_node} from {start_node} is {result}.")
    else:
        print(f"{goal_node} is not reachable from {start_node}.")
